#ifndef _TCP_CLIENT_H
#define _TCP_CLIENT_H
#include "sys.h"
#include "lwip/debug.h"
#include "lwip/stats.h"
#include "lwip/tcp.h"
#include "lwip/memp.h"
#include "lwip/mem.h"
#include "lwip_comm.h"
//////////////////////////////////////////////////////////////////////////////////	 
//???????????????��????????????????????????��????
//ALIENTEK STM32F4&F7??????
//TCP Client ???????	   
//???????@ALIENTEK
//???????:www.openedv.com
//????????:2016/8/5
//?��??V1.0
//??????��?????????
//Copyright(C) ?????????????????????? 2009-2019
//All rights reserved									  
//*******************************************************************************
//??????
//??
////////////////////////////////////////////////////////////////////////////////// 	   

#define TCP_CLIENT_RX_BUFSIZE	1500	//????tcp client?????????????
#define TCP_CLIENT_TX_BUFSIZE	200		//????tcp client????????????
#define REMOTE_PORT				8087	//????????????????
#define LWIP_SEND_DATA			0X80    //?????????????
#define	TCP_CLIENT_PORT			10001	//????tcp client???????????
#define TCP_CLIENT_REMOTE_IP "192.168.16.100"

struct ip_addr {
  uint32_t addr;
};

//tcp????????????
enum tcp_client_states
{
	ES_TCPCLIENT_NONE = 0,		//???????
	ES_TCPCLIENT_CONNECTED,		//????????????? 
	ES_TCPCLIENT_CLOSING,		//???????
}; 
//LWIP??????????????
struct tcp_client_struct
{
	uint8_t state;               //????????
	struct tcp_pcb *pcb;    //??????pcb
	struct pbuf *p;         //??????/?????pbuf
};  

void tcp_client_set_remoteip(void);
void tcp_client_test(void);//TCP Client???????
err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err);
err_t tcp_client_recv(void *arg,struct tcp_pcb *tpcb,struct pbuf *p,err_t err);
err_t tcp_client_usersent(struct tcp_pcb *tpcb, uint8_t *buf, uint16_t len);
void tcp_client_error(void *arg,err_t err);
err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb);
err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len);
void tcp_client_senddata(struct tcp_pcb *tpcb, struct tcp_client_struct * es);
void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct * es );
//extern uint8_t tcp_client_sendbuf[10000 + 20];
#endif
